@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (OriginalForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div ="mb-3">
        <label for="filterInput" class="form-label">Filtr po opisie:</label>
        <input id="filterInput" class="form-control"@oninput=@Input/>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in VisibleForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <p>Number of warm days: @warmDaysCount</p>

    <p><button class="btn btn-primary me-2" @onclick="() => WarmDaysFilter()">Filtruj ciepłe dni</button></p>
    <p><button class="btn btn-secondary" @onclick="RestoreForecasts">Przywróć pełną listę</button></p>
}

@code {
    private WeatherForecast[]? OriginalForecasts;
    private WeatherForecast[]? VisibleForecasts;
    private int warmDaysCount;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        OriginalForecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        VisibleForecasts = OriginalForecasts.ToArray();
        warmDaysCount = VisibleForecasts.Count(f => f.TemperatureC > 15);
    }

    private void WarmDaysFilter()
    {
        VisibleForecasts = OriginalForecasts?.Where(f => f.TemperatureC > 15).ToArray(); 
    }

    private void RestoreForecasts()
    {
        VisibleForecasts = OriginalForecasts.ToArray();
    }

    private void Input(ChangeEventArgs arg)
    {
        string filter = arg.Value?.ToString() ?? string.Empty;
        VisibleForecasts = VisibleForecasts?.Where(f => f.Summary != null && f.Summary.Contains(filter)).ToArray();

    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
