@page "/books/delete"
@using Microsoft.EntityFrameworkCore
@using RatingApp.Components
@inject IDbContextFactory<RatingApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<AuthorizeView>
    <Authorized Context="authContext">
        <p>Are you sure you want to delete this?</p>
        <div>
            <h2>Book</h2>
            <hr />
            @if (book is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <dl class="row">
                    <dt class="col-sm-2">Author</dt>
                    <dd class="col-sm-10">@book.Author</dd>

                    <dt class="col-sm-2">Title</dt>
                    <dd class="col-sm-10">@book.Title</dd>

                    <dt class="col-sm-2">ReleaseDate</dt>
                    <dd class="col-sm-10">@book.ReleaseDate</dd>

                    <dt class="col-sm-2">Rate</dt>
                    <dd class="col-sm-10">@book.Rate</dd>

                    <dt class="col-sm-2">ShortReview</dt>
                    <dd class="col-sm-10">@book.ShortReview</dd>

                    <dt class="col-sm-2">PhotoUri</dt>
                    <dd class="col-sm-10">@book.PhotoUri</dd>
                </dl>

                <EditForm Model="book" OnValidSubmit="DeleteBook">
                    <button type="submit" class="btn btn-danger" disabled="@(book is null)">Delete</button> |
                    <a href="/books">Back to List</a>
                </EditForm>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p class="text-danger">Musisz być zalogowany, aby usunąć książkę.</p>
        <a href="Account/Login">Zaloguj się</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Book? book;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Book.FirstOrDefaultAsync(m => m.Id == Id);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Book.Remove(book!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
